// Generated by CoffeeScript 1.9.3
(function() {
  var AutoOptions, RowWrapper,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AutoOptions = (function() {
    function AutoOptions(options) {
      var key, val;
      if (options == null) {
        options = {};
      }
      for (key in options) {
        val = options[key];
        if (val != null) {
          this[key] = val;
        }
      }
    }

    return AutoOptions;

  })();

  window.SmartList = (function(superClass) {
    extend(SmartList, superClass);

    function SmartList() {
      return SmartList.__super__.constructor.apply(this, arguments);
    }

    SmartList.prototype.numberOfRows = function() {
      return 0;
    };

    SmartList.prototype.heightOfRowAt = function(index) {
      return 0;
    };

    SmartList.prototype.contentOfRowAt = function(index) {
      return "";
    };

    SmartList.prototype.root = document;

    SmartList.prototype.afterLoad = function(dom) {};

    SmartList.prototype.bufferLength = 3;

    SmartList.prototype.refresh = function() {
      var cnt, found, i, j, ref, ref1, row, rowHeight, toHideList, top;
      top = 0;
      cnt = this.bufferLength;
      toHideList = [];
      found = false;
      for (i = j = 0, ref = this._numberOfRows(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        row = this._data[i];
        rowHeight = row.updateHeight(this.heightOfRowAt(i), toHideList.length === 0);
        if ((this.constructor.viewPortBottom() > top && top > this.constructor.viewPortTop()) || (this.constructor.viewPortTop() < (ref1 = top + rowHeight) && ref1 < this.constructor.viewPortBottom())) {
          row.show(this.contentOfRowAt(i), this.afterLoad);
          found = true;
        } else {
          if (!found) {
            toHideList.push(i);
          } else {
            if (cnt > 0) {
              cnt--;
              row.show(this.contentOfRowAt(i), this.afterLoad);
            } else {
              row.hide();
            }
          }
        }
        top += rowHeight;
      }
      cnt = this.bufferLength;
      i = toHideList.length - 1;
      while (i > 0) {
        row = this._data[toHideList[i]];
        if (cnt > 0) {
          row.show(this.contentOfRowAt(toHideList[i]), this.afterLoad);
        } else {
          row.hide();
        }
        i--;
        cnt--;
      }
      return toHideList.length = 0;
    };

    SmartList.prototype._numberOfRows = function() {
      var i, j, k, nrows, ref, ref1, ref2, ref3, row;
      nrows = this.numberOfRows();
      if (nrows > this._data.length) {
        for (i = j = ref = this._data.length, ref1 = nrows; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
          row = new RowWrapper({
            height: this.heightOfRowAt(i)
          });
          this._data.push(row);
          this.root.appendChild(row.dom);
        }
      } else if (nrows < this._data.length) {
        for (i = k = ref2 = this._data.length - 1, ref3 = nrows; k >= ref3; i = k += -1) {
          this._data[i].remove(this.root);
        }
        this._data.splace(nrows, this._data.length - nrows);
      }
      return nrows;
    };

    SmartList.viewPortTop = function() {
      return window.scrollY;
    };

    SmartList.viewPortBottom = function() {
      return window.scrollY + window.screen.height;
    };

    SmartList.prototype._data = [];

    return SmartList;

  })(AutoOptions);

  RowWrapper = (function(superClass) {
    extend(RowWrapper, superClass);

    RowWrapper.prototype.dom = null;

    RowWrapper.prototype.height = 0;

    RowWrapper.prototype.updateHeight = function(height, updateTop) {
      if (height !== this.height) {
        this.dom.style.height = height + "px";
        if (updateTop) {
          window.scrollY += height - this.height;
        }
        this.height = height;
      }
      return height;
    };

    function RowWrapper() {
      RowWrapper.__super__.constructor.apply(this, arguments);
      this.dom = document.createElement("div");
      this.dom.style.height = this.height + "px";
    }

    RowWrapper.prototype.show = function(content, callback) {
      if (!this.isShown) {
        this.dom.innerHTML = content;
        callback(this.dom);
      }
      return this.isShown = true;
    };

    RowWrapper.prototype.hide = function() {
      if (this.isShown) {
        this.dom.innerHTML = "";
      }
      return this.isShown = false;
    };

    RowWrapper.prototype.remove = function(root) {
      this.hide();
      root.removeChild(this.dom);
      return this.dom = null;
    };

    RowWrapper.prototype.isShown = false;

    return RowWrapper;

  })(AutoOptions);

}).call(this);
